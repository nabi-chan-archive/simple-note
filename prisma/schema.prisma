generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String  @map("user_id")
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("nextauth_accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("nextauth_sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    tab           Tab[]
    article       Article[]
    printer       Printer?
    share         Share[]

    @@map("nextauth_users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("nextauth_verificationtokens")
}

model Tab {
    id String @id @default(cuid())

    title String
    order Int?

    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String @map("owner_id")

    createdAt DateTime @default(now())

    article Article?

    @@map("tabs")
}

model Article {
    id String @id @default(cuid())

    createdAt DateTime @default(now())

    content Json[]

    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String @map("owner_id")

    tab   Tab    @relation(fields: [tabId], references: [id], onDelete: Cascade)
    tabId String @unique @map("tab_id")

    share Share?

    @@map("articles")
}

model Printer {
    id String @id @default(cuid())

    name String
    ip   String
    port String

    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String @unique @map("owner_id")

    @@map("printers")
}

model Share {
    id String @id @default(cuid())

    isShareActive Boolean @default(true)

    createdAt DateTime  @default(now())
    expiredAt DateTime?

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String @map("author_id")

    article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId String  @unique @map("article_id")
}

model Log {
    id String @id @default(cuid())

    createdAt DateTime @default(now())

    message String
    level   String
    meta    Json
    ip      String

    @@map("logs")
}
